// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20220216110929_AddUniqueIndexes")]
    partial class AddUniqueIndexes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Models.AuditModels.ActionTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Core.Models.AuditModels.AuditRecordModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ActionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("ForwardToTextChatId")
                        .HasColumnType("int");

                    b.Property<int?>("NewRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("OldRoleId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("TextChatId")
                        .HasColumnType("int");

                    b.Property<int?>("UserUnderActionId")
                        .HasColumnType("int");

                    b.Property<int?>("VoiceChatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ActorId");

                    b.HasIndex("ForwardToTextChatId");

                    b.HasIndex("NewRoleId");

                    b.HasIndex("OldRoleId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TextChatId");

                    b.HasIndex("UserUnderActionId");

                    b.HasIndex("VoiceChatId");

                    b.ToTable("AuditRecords");
                });

            modelBuilder.Entity("Core.Models.ChatModels.TextChatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("Name", "RoomId")
                        .IsUnique();

                    b.ToTable("TextChats");
                });

            modelBuilder.Entity("Core.Models.ChatModels.VoiceChatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("Name", "RoomId")
                        .IsUnique();

                    b.ToTable("VoiceChats");
                });

            modelBuilder.Entity("Core.Models.MessagesModels.MessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int?>("ForwardedFromId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int?>("ReplyToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChatId");

                    b.HasIndex("ForwardedFromId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Models.RoleModels.RoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleTypeId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Models.RoleModels.RoleTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("Core.Models.RoomModels.RoomModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Core.Models.UserModels.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoomModelUserModel", b =>
                {
                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RoomsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoomModelUserModel");
                });

            modelBuilder.Entity("TextChatModelUserModel", b =>
                {
                    b.Property<int>("TextChatsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TextChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TextChatModelUserModel");
                });

            modelBuilder.Entity("UserModelVoiceChatModel", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("VoiceChatsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "VoiceChatsId");

                    b.HasIndex("VoiceChatsId");

                    b.ToTable("UserModelVoiceChatModel");
                });

            modelBuilder.Entity("Core.Models.AuditModels.AuditRecordModel", b =>
                {
                    b.HasOne("Core.Models.AuditModels.ActionTypeModel", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.UserModel", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ChatModels.TextChatModel", "ForwardToTextChat")
                        .WithMany()
                        .HasForeignKey("ForwardToTextChatId");

                    b.HasOne("Core.Models.RoleModels.RoleTypeModel", "NewRole")
                        .WithMany()
                        .HasForeignKey("NewRoleId");

                    b.HasOne("Core.Models.RoleModels.RoleTypeModel", "OldRole")
                        .WithMany()
                        .HasForeignKey("OldRoleId");

                    b.HasOne("Core.Models.RoomModels.RoomModel", "Room")
                        .WithMany("AuditJournal")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ChatModels.TextChatModel", "TextChat")
                        .WithMany()
                        .HasForeignKey("TextChatId");

                    b.HasOne("Core.Models.UserModels.UserModel", "UserUnderAction")
                        .WithMany()
                        .HasForeignKey("UserUnderActionId");

                    b.HasOne("Core.Models.ChatModels.VoiceChatModel", "VoiceChat")
                        .WithMany()
                        .HasForeignKey("VoiceChatId");

                    b.Navigation("ActionType");

                    b.Navigation("Actor");

                    b.Navigation("ForwardToTextChat");

                    b.Navigation("NewRole");

                    b.Navigation("OldRole");

                    b.Navigation("Room");

                    b.Navigation("TextChat");

                    b.Navigation("UserUnderAction");

                    b.Navigation("VoiceChat");
                });

            modelBuilder.Entity("Core.Models.ChatModels.TextChatModel", b =>
                {
                    b.HasOne("Core.Models.RoomModels.RoomModel", "Room")
                        .WithMany("TextChats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Core.Models.ChatModels.VoiceChatModel", b =>
                {
                    b.HasOne("Core.Models.RoomModels.RoomModel", "Room")
                        .WithMany("VoiceChats")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Core.Models.MessagesModels.MessageModel", b =>
                {
                    b.HasOne("Core.Models.UserModels.UserModel", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ChatModels.TextChatModel", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.UserModel", "ForwardedFrom")
                        .WithMany()
                        .HasForeignKey("ForwardedFromId");

                    b.HasOne("Core.Models.MessagesModels.MessageModel", "ReplyTo")
                        .WithMany()
                        .HasForeignKey("ReplyToId");

                    b.Navigation("Author");

                    b.Navigation("Chat");

                    b.Navigation("ForwardedFrom");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("Core.Models.RoleModels.RoleModel", b =>
                {
                    b.HasOne("Core.Models.RoleModels.RoleTypeModel", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.RoomModels.RoomModel", "Room")
                        .WithMany("Roles")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.UserModel", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleType");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoomModelUserModel", b =>
                {
                    b.HasOne("Core.Models.RoomModels.RoomModel", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TextChatModelUserModel", b =>
                {
                    b.HasOne("Core.Models.ChatModels.TextChatModel", null)
                        .WithMany()
                        .HasForeignKey("TextChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.UserModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserModelVoiceChatModel", b =>
                {
                    b.HasOne("Core.Models.UserModels.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.ChatModels.VoiceChatModel", null)
                        .WithMany()
                        .HasForeignKey("VoiceChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.ChatModels.TextChatModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Core.Models.RoomModels.RoomModel", b =>
                {
                    b.Navigation("AuditJournal");

                    b.Navigation("Roles");

                    b.Navigation("TextChats");

                    b.Navigation("VoiceChats");
                });

            modelBuilder.Entity("Core.Models.UserModels.UserModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
